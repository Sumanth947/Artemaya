# File: config.py
```python
import os
from dotenv import load_dotenv

load_dotenv()

GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
```

# File: prompts.py
```python
def get_system_prompt():
    return """You are an expert nutritionist specializing in women's health in India, with deep knowledge of South Indian cuisine and nutrition. You provide personalized dietary recommendations while considering local ingredients and cultural context.

<context>
Your role is to understand the user's profile and provide detailed, culturally appropriate nutritional guidance that accounts for their specific location in South India, health conditions, and dietary preferences.
</context>

<regional_nutrition_database>
### Kerala Region
- Staples: Matta rice, coconut, turmeric, black pepper
- Local Vegetables: Drumstick, ash gourd, elephant yam, tapioca
- Greens: Moringa leaves, spinach, amaranth
- Proteins: Red cow peas, black-eyed peas
- Medicinal: Fresh turmeric, ginger, holy basil
- Traditional Dishes: Avial, Thoran, Moru Curry, Sambar

### Tamil Nadu Region
- Staples: Ponni rice, millets (Ragi, Kambu, Thinai)
- Lentils: Toor dal, Urad dal
- Vegetables: Small onions, brinjal varieties, lady's finger
- Greens: Mulai keerai, Thandu keerai
- Medicinal: Native rice varieties, indigenous vegetables
- Traditional Dishes: Poriyal, Kootu, Rasam, Sambar

### Karnataka Region
- Staples: Ragi, Sona Masuri rice
- Vegetables: Ridge gourd, field beans, leafy greens
- Spices: Black pepper, cardamom from Coorg
- Proteins: Sprouted horse gram
- Medicinal: Forest honey, local berries
- Traditional Dishes: Bisi Bele Bath, Ragi Mudde, Palya

### Andhra & Telangana Region
- Staples: Sona Masuri rice, millets (Jowar, Bajra)
- Spices: Guntur red chilies, tamarind
- Greens: Gongura leaves
- Proteins: Bengal gram, green gram
- Medicinal: Neem flowers, curry leaves
- Traditional Dishes: Pesarattu, Gutti Vankaya, Pappu Charu
</regional_nutrition_database>

<menstrual_phase_nutrition>
### Follicular Phase (Days 1-14)
- Focus: Iron replenishment, energy restoration
- Recommended: Iron-rich foods, vitamin C for absorption
- Local Sources: Moringa leaves, ragi, dates, citrus fruits
- Recipes: 
  * Ragi Porridge with dates
  * Moringa leaf curry
  * Citrus fruit salad
  * Iron-rich green smoothies

### Ovulation Phase (Days 14-16)
- Focus: Hormone balance, energy maintenance
- Recommended: Fiber-rich foods, antioxidants
- Local Sources: Vegetables, fruits, whole grains
- Recipes:
  * Mixed vegetable curry
  * Whole grain dosa
  * Fresh fruit bowls
  * Sprouted salads

### Luteal Phase (Days 16-28)
- Focus: Managing PMS symptoms, mood stability
- Recommended: Magnesium-rich foods, complex carbs
- Local Sources: Leafy greens, millets, bananas
- Recipes:
  * Millet khichdi
  * Banana smoothie
  * Green leaf stir-fry
  * Nuts and seeds mix

### Menstrual Phase (Days 1-5)
- Focus: Iron replacement, reducing inflammation
- Recommended: Iron-rich foods, anti-inflammatory foods
- Local Sources: Green leafy vegetables, turmeric, ginger
- Recipes:
  * Turmeric ginger tea
  * Iron-rich spinach curry
  * Red rice meals
  * Warm vegetable soups
</menstrual_phase_nutrition>

<health_conditions>
### PCOD Management
- Recommended Foods:
  * All millets (ragi, jowar, bajra)
  * Leafy greens (spinach, fenugreek, amaranth)
  * Protein-rich legumes (horse gram, black gram)
  * Anti-inflammatory spices (turmeric, ginger)
  
- Foods to Limit:
  * Refined rice
  * Sugary foods
  * Processed snacks
  * High-fat dairy

- Meal Timing:
  * Regular 3 main meals
  * 2 small snacks
  * No late night eating
  
### PMS Management
- Recommended Foods:
  * Magnesium-rich foods (green leafy vegetables)
  * Omega-3 sources (flaxseeds, chia seeds)
  * Complex carbohydrates (millets, whole grains)
  * Calcium-rich foods (ragi, sesame seeds)
  
- Foods to Avoid:
  * Caffeine
  * Salt-rich foods
  * Processed sugars
  * Alcohol

### Iron Deficiency
- Iron-Rich Foods:
  * Green leafy vegetables
  * Dates and raisins
  * Jaggery
  * Millets
  
- Absorption Enhancers:
  * Vitamin C rich foods with meals
  * Sprouted grains and legumes
  
- Foods to Avoid During Meals:
  * Tea and coffee
  * Calcium supplements
  * High-fiber foods
</health_conditions>

<recipe_categories>
### Quick Recipes (15-20 minutes)
1. Kerala Style Moru Curry
   - Ingredients: Buttermilk, curry leaves, green chilies, turmeric
   - Method: Blend, temper, serve
   - Nutritional Benefits: Probiotics, easy digestion

2. Tamil Nadu Style Keerai Masiyal
   - Ingredients: Spinach, moong dal, garlic, cumin
   - Method: Pressure cook, mash, temper
   - Nutritional Benefits: Iron, protein, fiber

3. Karnataka Style Kosambari
   - Ingredients: Moong dal, carrots, cucumber, lemon
   - Method: Soak, chop, mix
   - Nutritional Benefits: Protein, vitamins, minerals

4. Andhra Style Tomato Pappu
   - Ingredients: Toor dal, tomatoes, turmeric, red chilies
   - Method: Pressure cook, temper
   - Nutritional Benefits: Protein, lycopene

### Medium Recipes (30-45 minutes)
1. Kerala Style Avial
   - Ingredients: Mixed vegetables, coconut, yogurt, curry leaves
   - Method: Steam, grind coconut, mix
   - Nutritional Benefits: Varied nutrients, probiotics

2. Tamil Nadu Style Sambar
   - Ingredients: Toor dal, mixed vegetables, sambar powder
   - Method: Pressure cook, temper, simmer
   - Nutritional Benefits: Protein, fiber, antioxidants

3. Karnataka Style Bisi Bele Bath
   - Ingredients: Rice, toor dal, vegetables, spice powder
   - Method: Pressure cook, mix, temper
   - Nutritional Benefits: Complete protein, fiber

4. Andhra Style Gutti Vankaya
   - Ingredients: Small brinjals, peanut powder, spices
   - Method: Stuff, cook, temper
   - Nutritional Benefits: Fiber, healthy fats

### Elaborate Recipes (60+ minutes)
1. Kerala Sadya Items
   - Multiple dishes including thorans, curries, payasam
   - Method: Detailed prep and cooking
   - Nutritional Benefits: Balanced meal

2. Tamil Nadu Style Biryani
   - Ingredients: Rice, vegetables/meat, spices
   - Method: Layer and dum cooking
   - Nutritional Benefits: Complex carbs, protein

3. Karnataka Festival Specials
   - Traditional items like holige, payasa
   - Method: Detailed preparation
   - Nutritional Benefits: Festival nutrition

4. Andhra Wedding Feast Items
   - Multiple courses with specific preparations
   - Method: Traditional cooking
   - Nutritional Benefits: Complete meal
</recipe_categories>

<output_format>
Please provide recommendations in the following structure:

1. Personalized Diet Overview
   - Location-based suggestions
   - Health condition considerations
   - Phase-specific recommendations

2. Weekly Meal Plan
   - Day-wise breakfast, lunch, dinner
   - Snack options
   - Time-based recipe selection

3. Shopping List
   - Essential ingredients
   - Weekly fresh produce
   - Storage tips

4. Health Recommendations
   - Specific to menstrual phase
   - Condition management
   - Supplement needs

5. Practical Tips
   - Meal prep suggestions
   - Time management
   - Storage solutions
</output_format>"""

def get_base_questions():
    return [
        {
            "id": "basic_info",
            "questions": [
                "What is your name?",
                "What is your age?",
                "Where do you live (city and state in South India)?",
                "Are you vegetarian or non-vegetarian?",
                "Do you have any food allergies or intolerances?",
                "What is your current weight and height?",
                "What is your target weight (if any)?"
            ]
        },
        {
            "id": "health_info",
            "questions": [
                "Which phase of your menstrual cycle are you in currently? (follicular/ovulation/luteal/menstrual)",
                "Do you have PCOD or experience PMS symptoms?",
                "What specific symptoms do you experience during menstruation?",
                "Have you been diagnosed with any nutritional deficiencies? (like iron, B12, D3, etc.)",
                "Do you have any other health conditions?",
                "How would you describe your activity level? (sedentary/moderate/active)",
                "What type of physical activity do you do and how often?"
            ]
        },
        {
            "id": "dietary_info",
            "questions": [
                "What does your typical breakfast look like?",
                "What do you usually have for lunch?",
                "What is your typical dinner?",
                "How many meals do you prefer per day?",
                "What cooking equipment do you have? (pressure cooker, mixer, etc.)",
                "How much time can you spend on cooking each day?",
                "Do you meal prep or prefer cooking fresh?",
                "What are your favorite local dishes?",
                "Are there any specific foods you avoid?",
                "Do you have any specific dietary goals?"
            ]
        }
    ]
```

# File: nutrition_advisor.py
```python
import google.generativeai as genai
from typing import Dict, List
import json
from datetime import datetime
from prompts import get_system_prompt, get_base_questions

class NutritionAdvisor:
    def __init__(self, api_key: str):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("gemini-1.5-flash")
        self.user_profile = {}
        
    def create_user_profile(self) -> str:
        """Gather user information through interactive questions"""
        profile_data = {}
        
        print("\nWelcome to your personalized nutrition advisory system!")
        print("I'll ask you some questions to understand your needs better.")
        print("Please provide detailed answers for the most personalized recommendations.\n")
        
        for question_group in get_base_questions():
            print(f"\n=== {question_group['id'].replace('_', ' ').title()} ===")
            for question in question_group['questions']:
                while True:
                    answer = input(f"{question}\n> ").strip()
                    if answer:  # Basic validation - ensure answer isn't empty
                        break
                    print("Please provide an answer to continue.")
                profile_data[question] = answer

        profile_text = self._format_profile(profile_data)
        self.user_profile = profile_data
        
        # Save profile to file
        self._save_profile(profile_data)
        
        return profile_text

    def _format_profile(self, profile_data: Dict) -> str:
        """Format the gathered data into a structured profile"""
        return f"""
<profile>
Basic Information:
- Name: {profile_data.get('What is your name?', 'Unknown')}
- Age: {profile_data.get('What is your age?', 'Unknown')}
- Location: {profile_data.get('Where do you live (city and state in South India)?', 'Unknown')}
- Dietary Preference: {profile_data.get('Are you vegetarian or non-vegetarian?', 'Unknown')}
- Allergies: {profile_data.get('Do you have any food allergies or intolerances?', 'None')}
- Current Weight/Height: {profile_data.get('What is your current weight and height?', 'Unknown')}
- Target Weight: {profile_data.get('What is your target weight (if any)?', 'None')}

Health Information:
- Menstrual Phase: {profile_data.get('Which phase of your menstrual cycle are you in currently? (follicular/ovulation/luteal/menstrual)', 'Unknown')}
- PCOD/PMS: {profile_data.get('Do you have PCOD or experience PMS symptoms?', 'Unknown')}
- Symptoms: {profile_data.get('What specific symptoms do you experience during menstruation?', 'None')}
- Deficiencies: {profile_data.get('Have you been diagnosed with any nutritional deficiencies? (like iron, B12, D3, etc.)', 'Unknown')}
- Other Health Conditions: {profile_data.get('Do you have any other health conditions?', 'None')}
- Activity Level: {profile_data.get('How would you describe your activity level? (sedentary/moderate/active)', 'Unknown')}
- Physical Activity: {profile_data.get('What type of physical activity do you do and how often?', 'Unknown')}

Dietary Information:
- Typical Breakfast: {profile_data.get('What does your typical breakfast look like?', 'Unknown')}
- Typical Lunch: {profile_data.get('What do you usually have for lunch?', 'Unknown')}
- Typical Dinner: {profile_data.get('What is your typical dinner?', 'Unknown')}
- Meal Frequency: {profile_data.get('How many meals do you prefer per day?', 'Unknown')}
- Cooking Equipment: {profile_data.get('What cooking equipment do you have? (pressure cooker, mixer, etc.)', 'Unknown')}
- Cooking Time: {profile_data.get('How much time can you spend on cooking each day?', 'Unknown')}
- Meal Prep Preference: {profile_data.get('Do you meal prep or prefer cooking fresh?', 'Unknown')}
- Favorite Dishes: {profile_data.get('What are your favorite local dishes?', 'Unknown')}
- Food Restrictions: {profile_data.get('Are there any specific foods you avoid?', 'None')}
- Dietary Goals: {profile_data.get('Do you have any specific dietary goals?', 'Unknown')}
</profile>
"""

    def _save_profile(self, profile_data: Dict):
        """Save user profile to a JSON file"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"user_profile_{timestamp}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(profile_data, f, indent=4)
            print(f"\nProfile saved to {filename}")
        except Exception as e:
            print(f"\nWarning: Could not save profile to file: {str(e)}")

    # Continuing in nutrition_advisor.py after _save_profile method:

```python
    def get_recommendations(self, profile_text: str) -> str:
        """Get personalized recommendations from the LLM"""
        try:
            # Split recommendations into chunks to handle length
            recommendations = []
            
            # Get main dietary recommendations
            main_prompt = f"{get_system_prompt()}\n\nUser Profile:\n{profile_text}\n\nBased on this profile, provide a comprehensive personalized diet plan and recommendations."
            
            try:
                response = self.model.generate_content(main_prompt)
                recommendations.append(response.text)
            except Exception as e:
                print(f"Error generating main recommendations: {str(e)}")
                return "Error generating recommendations. Please try again."

            # Save recommendations to file
            self._save_recommendations(recommendations[0])
            
            return recommendations[0]
        
        except Exception as e:
            return f"Error generating recommendations: {str(e)}"

    def _save_recommendations(self, recommendations: str):
        """Save recommendations to a text file"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"recommendations_{timestamp}.txt"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(recommendations)
            print(f"\nRecommendations saved to {filename}")
        except Exception as e:
            print(f"\nWarning: Could not save recommendations to file: {str(e)}")

    def load_profile(self, filename: str) -> str:
        """Load a previously saved user profile"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                profile_data = json.load(f)
            self.user_profile = profile_data
            return self._format_profile(profile_data)
        except Exception as e:
            raise Exception(f"Error loading profile: {str(e)}")
```

# File: main.py
```python
from nutrition_advisor import NutritionAdvisor
from config import GEMINI_API_KEY
import sys
import os

def clear_screen():
    """Clear the console screen"""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_header():
    """Print the application header"""
    print("=" * 60)
    print("             South Indian Women's Nutrition Advisor")
    print("=" * 60)
    print("\nProviding personalized nutrition advice based on your health profile")
    print("-" * 60)

def get_user_choice() -> str:
    """Get user's choice for program operation"""
    print("\nPlease select an option:")
    print("1. Create new profile and get recommendations")
    print("2. Load existing profile and get recommendations")
    print("3. Exit")
    
    while True:
        choice = input("\nEnter your choice (1-3): ").strip()
        if choice in ['1', '2', '3']:
            return choice
        print("Invalid choice. Please enter 1, 2, or 3.")

def load_existing_profile() -> str:
    """Handle loading of existing profile"""
    profiles = [f for f in os.listdir('.') if f.startswith('user_profile_') and f.endswith('.json')]
    
    if not profiles:
        print("\nNo existing profiles found.")
        return None
    
    print("\nAvailable profiles:")
    for i, profile in enumerate(profiles, 1):
        print(f"{i}. {profile}")
    
    while True:
        try:
            choice = int(input("\nEnter profile number to load (0 to cancel): "))
            if choice == 0:
                return None
            if 1 <= choice <= len(profiles):
                return profiles[choice-1]
            print("Invalid choice. Please try again.")
        except ValueError:
            print("Please enter a valid number.")

def main():
    clear_screen()
    print_header()
    
    try:
        advisor = NutritionAdvisor(GEMINI_API_KEY)
        
        while True:
            choice = get_user_choice()
            
            if choice == '1':
                # Create new profile
                profile = advisor.create_user_profile()
                
            elif choice == '2':
                # Load existing profile
                profile_file = load_existing_profile()
                if not profile_file:
                    continue
                try:
                    profile = advisor.load_profile(profile_file)
                    print("\nProfile loaded successfully!")
                except Exception as e:
                    print(f"\nError loading profile: {str(e)}")
                    continue
                
            else:  # choice == '3'
                print("\nThank you for using the Nutrition Advisor. Goodbye!")
                sys.exit(0)
            
            # Generate recommendations
            print("\nGenerating personalized recommendations...")
            recommendations = advisor.get_recommendations(profile)
            
            print("\n=== Your Personalized Recommendations ===")
            print(recommendations)
            
            input("\nPress Enter to continue...")
            clear_screen()
            print_header()
            
    except Exception as e:
        print(f"\nAn error occurred: {str(e)}")
        print("Please try again or contact support if the problem persists.")
        sys.exit(1)

if __name__ == "__main__":
    main()
```

# File: requirements.txt
```
google-generativeai>=0.3.0
python-dotenv>=0.19.0
```

To run this complete system:

1. Create a new directory and create all the files with the code provided above:
   ```
   nutrition_advisor/
   ├── .env
   ├── config.py
   ├── prompts.py
   ├── nutrition_advisor.py
   ├── main.py
   └── requirements.txt
   ```

2. Create a `.env` file with your Gemini API key:
   ```
   GEMINI_API_KEY=your_api_key_here
   ```

3. Set up your virtual environment:
   ```bash
   python -m venv venv
   # On Windows:
   venv\Scripts\activate
   # On macOS/Linux:
   source venv/bin/activate
   ```

4. Install requirements:
   ```bash
   pip install -r requirements.txt
   ```

5. Run the program:
   ```bash
   python main.py
   ```

The program will:
- Present a clear interface for creating or loading profiles
- Save all profiles and recommendations with timestamps
- Provide comprehensive nutritional advice based on the detailed prompt system
- Handle errors gracefully
- Allow for multiple sessions

Would you like me to:
1. Add more error handling for specific scenarios?
2. Add data validation for user inputs?
3. Include example profiles for testing?